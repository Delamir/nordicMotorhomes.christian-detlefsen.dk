package grp1.motorhomes.repository;

import grp1.motorhomes.model.Customer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlInOutParameter;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.PreparedStatement;
import java.sql.Statement;
import java.util.List;

/**
 * @author Joachim
 */
@Repository
public class CustomerRepo {

    @Autowired
    JdbcTemplate template;

    /**
     * @author Joachim
     */
    public List<Customer> fetchAllCustomers() {
        String sql = "SELECT customer_number AS customerNumber, name, licence_number AS licenceNumber, post_code AS postCode, street, city " +
                "FROM customers JOIN addresses USING(customer_number)";
        RowMapper<Customer> rowMapper = new BeanPropertyRowMapper<>(Customer.class);
        return template.query(sql, rowMapper);
    }

    /**
     * @author Joachim
     */
    public void createCustomer(Customer customer) {

        String insertCustomerValues = "INSERT INTO customers(name, licence_number) " +
                "VALUES (?, ?)";

        String insertAddressValues = "INSERT INTO addresses(customer_number, street, post_code, city)" +
                "VALUES (?, ?, ?, ?)";

        // jdbc template does not by default support returning generated keys
        // code stub with much help from https://www.baeldung.com/spring-jdbc-autogenerated-keys
        KeyHolder keyHolder = new GeneratedKeyHolder();
        template.update(connection -> {
            PreparedStatement preparedStatement = connection.prepareStatement(insertCustomerValues, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, customer.getName());
            preparedStatement.setString(2, customer.getLicenceNumber());
            return preparedStatement;
        }, keyHolder);

        template.update(insertAddressValues, keyHolder.getKey().intValue(), customer.getStreet(), customer.getPostCode(),
                customer.getCity());
        }

        public Customer findCustomer(int customerNumber) {
        String selectSql = "SELECT customer_number AS customerNumber, name, licence_number AS licenceNumber " +
                "FROM customers WHERE customer_number = ?";
        RowMapper<Customer> rowMapper = new BeanPropertyRowMapper<>(Customer.class);
        return template.queryForObject(selectSql, rowMapper, customerNumber);
        }

        public void editCustomer(Customer customer) {
        String updateSql = "UPDATE customers SET licence_number = ?, name = ? WHERE customer_number = ?";
        template.update(updateSql, customer.getLicenceNumber(), customer.getName());
        }

        public void deleteCustomer(int customerNumber) {
        String deleteSql = "DELETE FROM addresses WHERE customer_number = ? ";
        template.update(deleteSql, customerNumber);
        deleteSql = "DELETE FROM customers WHERE customer_number = ?";
        template.update(deleteSql, customerNumber);
        }

    }