package grp1.motorhomes.repository;

import grp1.motorhomes.model.Customer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlInOutParameter;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.PreparedStatement;
import java.sql.Statement;
import java.util.List;

/**
 * @author Joachim
 */
@Repository
public class CustomerRepo {

    @Autowired
    JdbcTemplate template;

    /**
     * @author Joachim
     */
    public List<Customer> fetchAllCustomers() {
        String sql = "SELECT customer_number AS customerNumber, name, licence_number AS licenceNumber, post_code AS postCode, street, city " +
                "FROM customers JOIN addresses USING(customer_number) JOIN cities using(city_id) ORDER BY name";
        RowMapper<Customer> rowMapper = new BeanPropertyRowMapper<>(Customer.class);
        return template.query(sql, rowMapper);
    }

    /**
     * @author Joachim og Sverri
     */
    public void createCustomer(Customer customer) {



        String insertCity= "INSERT INTO cities(post_code, city) VALUES(?, ?)";

        // jdbc template does not by default support returning generated keys
        // code stub with much help from https://www.baeldung.com/spring-jdbc-autogenerated-keys
        KeyHolder keyHolder = new GeneratedKeyHolder();
        template.update(connection -> {
            PreparedStatement preparedStatement = connection.prepareStatement(insertCity, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setInt(1, customer.getPostCode());
            preparedStatement.setString(2, customer.getCity());
            return preparedStatement;
        }, keyHolder);
        int city_id = keyHolder.getKey().intValue();
        String insertCustomerValues = "INSERT INTO customers(name, licence_number) " +
                "VALUES (?, ?)";


        keyHolder = new GeneratedKeyHolder();
        template.update(connection -> {
            PreparedStatement preparedStatement = connection.prepareStatement(insertCustomerValues, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, customer.getName());
            preparedStatement.setString(2, customer.getLicenceNumber());
            return preparedStatement;
        }, keyHolder);

        String insertAddressValues = "INSERT INTO addresses(customer_number, street, city_id)" +
                "VALUES (?, ?, ?)";

        template.update(insertAddressValues, keyHolder.getKey().intValue(), customer.getStreet(), city_id);
    }

    /**
     * @Author Christian og Joachim
     * @param customerNumber
     */
    public Customer findCustomer(int customerNumber) {
        String selectSql = "SELECT customer_number AS customerNumber, name, licence_number AS licenceNumber, post_code AS postCode, street, city " +
                "FROM customers JOIN addresses USING(customer_number) JOIN cities USING(city_id) WHERE customer_number = ?";
        RowMapper<Customer> rowMapper = new BeanPropertyRowMapper<>(Customer.class);
        return template.queryForObject(selectSql, rowMapper, customerNumber);
    }

    /**
     * @param customer
     * @Author Christian og Joachim
     */
    public void editCustomer(Customer customer) {
        String updateSql = "UPDATE customers SET licence_number = ?, name = ? WHERE customer_number = ?";
        template.update(updateSql, customer.getLicenceNumber(), customer.getName(), customer.getCustomerNumber());

        //insert city if it does not exist
        String insertCity = "INSERT INTO cities(post_code, city) SELECT ?, ? WHERE NOT EXISTS " +
                "( SELECT * FROM cities WHERE post_code = ? AND city = ?)";

        template.update(insertCity, customer.getPostCode(),customer.getCity(),customer.getPostCode(),customer.getCity());

        int city_id = template.queryForObject("SELECT city_id FROM cities WHERE post_code = ? AND city = ?", Integer.class,customer.getPostCode(),customer.getCity());


        updateSql = "UPDATE addresses SET street = ?, city_id = ? WHERE customer_number = ?";
        template.update(updateSql, customer.getStreet(), city_id, customer.getCustomerNumber());
    }

    /**
     * @Author Christian og Joachim
     * @param customerNumber
     */
    public void deleteCustomer(int customerNumber) {
        String deleteSql = "DELETE FROM addresses WHERE customer_number = ? ";
        template.update(deleteSql, customerNumber);
        deleteSql = "DELETE FROM customers WHERE customer_number = ?";
        template.update(deleteSql, customerNumber);

        String select = "SELECT city_id FROM addresses JOIN cities using(city_id) WHERE customer_number = ?";
        int city_id = template.queryForObject(select,Integer.class,customerNumber);
        deleteSql = "DELETE FROM cities WHERE city_id = ?";
        template.update(deleteSql,city_id);
    }
}